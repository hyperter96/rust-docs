import{_ as e}from"./chunks/ArticleMetadata.B6LTgUMn.js";import{_ as k,m as p,a as r,u as d,B as o,e as t,x as g,ai as c,o as n,p as y,q as A}from"./chunks/framework.coFu0xgG.js";import"./chunks/theme.CAIqAJ98.js";const f=JSON.parse('{"title":"变量与常见数据类型","description":"","frontmatter":{"title":"变量与常见数据类型","author":"皮特ᴾᵗ","date":"2024/02/04 11:29","categories":["Rust语法入门"],"tags":["Rust","Rust基础","变量"]},"headers":[],"relativePath":"categories/rust/01-Rust语法入门/02-变量与常见数据类型.md","filePath":"categories/rust/01-Rust语法入门/02-变量与常见数据类型.md","lastUpdated":1713711691000}'),D={name:"categories/rust/01-Rust语法入门/02-变量与常见数据类型.md"},u=t("h1",{id:"变量与常见数据类型",tabindex:"-1"},[g("变量与常见数据类型 "),t("a",{class:"header-anchor",href:"#变量与常见数据类型","aria-label":'Permalink to "变量与常见数据类型"'},"​")],-1),C=c(`<h2 id="变量与不可变性" tabindex="-1">变量与不可变性 <a class="header-anchor" href="#变量与不可变性" aria-label="Permalink to &quot;变量与不可变性&quot;">​</a></h2><h3 id="rust中的变量基础知识" tabindex="-1">Rust中的变量基础知识 <a class="header-anchor" href="#rust中的变量基础知识" aria-label="Permalink to &quot;Rust中的变量基础知识&quot;">​</a></h3><ol><li><p>在Rust中，使用<code>let</code>关键字来声明变量</p></li><li><p>Rust支持类型推导，但你也可以显式指定变量的类型：</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> i32</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 显式指定x的类型为i32</span></span></code></pre></div></li><li><p>变量名蛇形命名法 (Snake Case)，而枚举和结构体命名使用帕斯卡命名法 (Pascal Case)，如果变量没有使用到可以前置下划线，消除警告</p></li><li><p>强制类型转换<code>Casting a Value to a Different Type</code>:</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 3.1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">as</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> i32</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span></code></pre></div></li><li><p>打印变量</p><ol><li><code>println!(&quot;val: {}&quot;, x);</code></li><li><code>println!(&quot;val: {x}&quot;);</code></li></ol></li></ol><h3 id="rust中的变量是默认不可变的" tabindex="-1">Rust中的变量是默认不可变的 <a class="header-anchor" href="#rust中的变量是默认不可变的" aria-label="Permalink to &quot;Rust中的变量是默认不可变的&quot;">​</a></h3><p>不可变性是Rust实现其可靠性和安全性目标的关键；</p><p>它迫使程序员更深入的思考程序状态的变化，并明确哪些部分的程序状态可能发生变化的；</p><p>不可变性有助于防止一类常见错误，如数据竞争和并发问题。</p><h3 id="shadowing-variables并不是重新赋值" tabindex="-1">Shadowing Variables并不是重新赋值 <a class="header-anchor" href="#shadowing-variables并不是重新赋值" aria-label="Permalink to &quot;Shadowing Variables并不是重新赋值&quot;">​</a></h3><p>Rust允许你隐藏一个变量，这意味着你可以声明一个与现有变量同名的新变量，从而有效的隐藏前一个变量：</p><ol><li><p>可以改变值</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// shadowing</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> i32</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> i32</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    println!</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;inner x: {x}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// inner x: 10</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">} </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 内部的x被销毁了</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println!</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;outer x: {x}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// outer x: 5</span></span></code></pre></div></li><li><p>可以改变类型</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// shadowing</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> i32</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">str</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 在同一作用域下重新声明了x, 最终覆盖了之前的x</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println!</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;New x: {x}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// New x: hello</span></span></code></pre></div></li><li><p>可以改变可变性</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// shadowing</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> i32</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> mut</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">str</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;this&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 重新定义可变性</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println!</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;x: {x}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// x: this</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;that&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println!</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Mut x: {x}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// Mut x: that</span></span></code></pre></div></li></ol><h2 id="常量const和静态变量static" tabindex="-1">常量<code>const</code>和静态变量<code>static</code> <a class="header-anchor" href="#常量const和静态变量static" aria-label="Permalink to &quot;常量\`const\`和静态变量\`static\`&quot;">​</a></h2><h3 id="const常量" tabindex="-1"><code>const</code>常量 <a class="header-anchor" href="#const常量" aria-label="Permalink to &quot;\`const\`常量&quot;">​</a></h3><ul><li>常量的值必须是在编译时已知的常量表达式，必须指定类型与值</li><li>与C语言的宏定义不同，Rust的<code>const</code>常量的值被直接嵌入到生成的底层机器代码中，而不是进行简单的字符替换</li><li>常量名与静态变量命名全部必须是大写，单词之间加入下划线</li><li>常量的作用域是块级作用域，它只在声明它们的作用域内可见</li></ul><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 定义常量</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> SECOND_HOUR</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> usize</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 3_600</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> SECOND_DAY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> usize</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 24</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> SECOND_HOUR</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// compile-time constant</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println!</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;{}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">SECOND_DAY</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 86400</span></span></code></pre></div><h3 id="static静态变量" tabindex="-1"><code>static</code>静态变量 <a class="header-anchor" href="#static静态变量" aria-label="Permalink to &quot;\`static\`静态变量&quot;">​</a></h3><ol><li>与<code>const</code>常量不同，<code>static</code>变量是在运行时分配内存的</li><li>并不是不可变的，可以使用<code>unsafe</code>修改</li><li>静态变量的生命周期为整个程序的运行时间</li></ol>`,16);function F(s,B,m,_,b,E){const h=e,l=p("ClientOnly");return n(),r("div",null,[u,d(l,null,{default:o(()=>{var i,a;return[(((i=s.$frontmatter)==null?void 0:i.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(n(),y(h,{key:0,article:s.$frontmatter},null,8,["article"])):A("",!0)]}),_:1}),C])}const R=k(D,[["render",F]]);export{f as __pageData,R as default};
