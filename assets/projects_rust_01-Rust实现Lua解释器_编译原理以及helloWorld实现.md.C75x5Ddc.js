import{_ as h}from"./chunks/ArticleMetadata.B6LTgUMn.js";import{_ as e,m as k,a as d,u as r,B as o,e as n,x as g,ai as c,o as l,p as F,q as y}from"./chunks/framework.coFu0xgG.js";import"./chunks/theme.CAIqAJ98.js";const f=JSON.parse('{"title":"编译原理以及\\"hello world!\\"实现","description":"","frontmatter":{"title":"编译原理以及\\"hello world!\\"实现","author":"皮特ᴾᵗ","date":"2024/05/05 22:19","categories":["Rust实战"],"tags":["Rust","Rust实现Lua解释器","项目实战"]},"headers":[],"relativePath":"projects/rust/01-Rust实现Lua解释器/编译原理以及helloWorld实现.md","filePath":"projects/rust/01-Rust实现Lua解释器/编译原理以及helloWorld实现.md","lastUpdated":1718531058000}'),D={name:"projects/rust/01-Rust实现Lua解释器/编译原理以及helloWorld实现.md"},C=n("h1",{id:"编译原理以及-hello-world-实现",tabindex:"-1"},[g('编译原理以及"hello world!"实现 '),n("a",{class:"header-anchor",href:"#编译原理以及-hello-world-实现","aria-label":'Permalink to "编译原理以及"hello world!"实现"'},"​")],-1),A=c(`<h2 id="编译原理" tabindex="-1">编译原理 <a class="header-anchor" href="#编译原理" aria-label="Permalink to &quot;编译原理&quot;">​</a></h2><h3 id="编译型和解释型" tabindex="-1">编译型和解释型 <a class="header-anchor" href="#编译型和解释型" aria-label="Permalink to &quot;编译型和解释型&quot;">​</a></h3><p>无论什么编程语言，源代码在交给计算机执行之前，必然需要一个翻译的过程，以把源代码翻译成计算机可执行的语言。按照这个翻译的时机，编程语言大致可以分为2种：</p><ul><li>编译型，即编译器先将源代码编译成计算机语言，并生成可执行文件。后续由计算机直接执行此文件。比如在Linux下，用编译器gcc把C语言源码编译为可执行文件。</li><li>解释型，则需要一个解释器，实时地加载并解析源程序，然后将解析的结果对应到预先编译的功能并执行。这个解释器一般是由上面的编译型语言实现。</li></ul><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>  +-------+  编译   +----------+          +---------+  解析并执行   +----------+</span></span>
<span class="line"><span>  | 源代码 | -----&gt; | 可执行文件|          |  源代码  | ----------&gt; | Lua解释器 |</span></span>
<span class="line"><span>  | bar.c |         |  bar.exe |          | bar.lua |             |  lua.exe |</span></span>
<span class="line"><span>  +-------+        +----------+           +---------+             +----------+</span></span>
<span class="line"><span>                        ^                                               ^</span></span>
<span class="line"><span>                        |执行机器指令                                    |执行机器指令</span></span>
<span class="line"><span>                        |                                               |</span></span>
<span class="line"><span>                  +-------------+                                 +-------------+</span></span>
<span class="line"><span>                  |    计算机    |                                 |    计算机   |</span></span>
<span class="line"><span>                  +-------------+                                 +-------------+</span></span>
<span class="line"><span></span></span>
<span class="line"><span>                编译型                                    解释型</span></span></code></pre></div><p>上图大致展示了两种类型的翻译和执行过程。Lua属于解释型语言，我们的目标也是要实现Lua解释器，所以下面只介绍这个类型。在此之前先明确几个名词的含义：</p><ul><li>编译（compile），这个名词的含义有点乱。广义上可以指任何将程序从一种计算机程序语言转换到另一种语言计算机语言的过程，比如“编译原理”这个词中的编译，再比如把Lua的源码转换为字节码的过程也可以认为是编译。狭义上特指上述的第一种类型，跟“解释型”相对。再狭义些，特指上述编译型过程的某个阶段，跟预处理、链接等过程并列。本文后续尽量避免使用这个名词。</li><li>解释（interpret），特指上述的第二种编译类型，跟“编译型”相对。</li><li>解析，是个笼统的概念，而非编译原理的专有名词。可指任何形式的转换，比如理解源码的语义，再比如把字符串解析为数字等。</li><li>翻译，对应编译的最广义的概念。</li><li>分析，这个词本身是个笼统的概念，但“词法分析”和“语法分析”是编译原理中的专有名词。</li></ul><h3 id="解析和执行" tabindex="-1">解析和执行 <a class="header-anchor" href="#解析和执行" aria-label="Permalink to &quot;解析和执行&quot;">​</a></h3><p>一般编译原理教程上介绍的编译过程如下：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>       词法分析           语法分析         语义分析</span></span>
<span class="line"><span>字符流 --------&gt; Token流 --------&gt; 语法树 --------&gt; 中间代码 ...</span></span></code></pre></div><ul><li>其中字符流对应源代码，即把源代码作为字符流来处理。</li><li>词法分析，把字符流拆为语言支持的Token。比如上述Lua代码就拆为“<code>标识print</code>”和“字符串<code>&quot;hello, world!&quot;</code>”两个Token。Lua是忽略空白字符的。</li><li>语法分析，把Token流按照语法规则，解析为语法树。比如刚才的2个Token被识别为一条函数调用语句，其中“<code>标识print</code>”是函数名，“字符串<code>&quot;hello, world!&quot;</code>”是参数。</li><li>语义分析，把这条函数调用的语句生成对应的中间代码，这些代码指示从哪里查找函数体，把参数加载到什么位置等具体功能。</li></ul><p>生成中间代码之后，编译型和解释型语言就分道扬镳。编译型继续前进，最终生成可以直接执行的机器码，并包装为可执行文件。而对于解释型语言到此就告一段落，生成的中间代码（一般称为字节码）就是编译的结果；而字节码的执行就是虚拟机的任务了。</p><p>虚拟机把字节码转换为对应的一系列预先编译好的功能，然后执行这些功能。比如执行上述生成的字节码，虚拟机会首先找到对应的函数，即<code>print</code>，是Lua标准库里的函数；然后加载参数，即<code>&quot;hello, world&quot;</code>；最后调用<code>print</code>函数。这个函数也是预先编译好的，其功能是打印参数。这就最终完成了输出<code>&quot;hello, world!&quot;</code>的功能。</p><p>上述只是一般流程。具体到每个语言或者每个解释器流程可能有所不同。比如有的解释器可能不生成字节码，而是让虚拟机直接执行语法树。而Lua的官方实现则是省略了语法树，由语法分析直接生成字节码。这些选择各有优劣，但已超出我们的主题范围，这里不做讨论。我们的解释器在主流程上是完全参考的Lua官方实现，所以最终的流程如下：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>       词法分析           语法分析</span></span>
<span class="line"><span>字符流 --------&gt; Token流 --------&gt; 字节码</span></span>
<span class="line"><span>                                    ^</span></span>
<span class="line"><span>                                    |</span></span>
<span class="line"><span>                                  虚拟机</span></span></code></pre></div><p>由此可以明确我们的解释器的主要功能组件：词法分析、语法分析和虚拟机。可以把词法分析和语法分析合并称为“解析”过程，而虚拟机是“执行”的过程，那么字节码就是连接这两个过程的纽带。解析和执行两个过程相对独立。接下来我们就以字节码作为突破口，开始实现我们的解释器。</p><h2 id="字节码" tabindex="-1">字节码 <a class="header-anchor" href="#字节码" aria-label="Permalink to &quot;字节码&quot;">​</a></h2><p>作为一个小白，要实现一个解释器，开始自然是一头雾水，无从下手。</p><p>好在上一节最后介绍了字节码，把整个解释器流程分为解析和执行两个阶段。那么我们就可以从字节码入手：</p><ul><li>先确定字节码，</li><li>然后让解析过程（词法分析和语法分析）努力生成这套字节码，</li><li>再让执行过程（虚拟机）努力执行这套字节码。</li></ul><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>          生成             执行</span></span>
<span class="line"><span>    解析 -------&gt; 字节码 &lt;------- 虚拟机</span></span></code></pre></div><p>但字节码长什么样？如何定义？有什么类型？可以先参考Lua的官方实现。</p><h3 id="luac的输出" tabindex="-1"><code>luac</code>的输出 <a class="header-anchor" href="#luac的输出" aria-label="Permalink to &quot;\`luac\`的输出&quot;">​</a></h3><p>为方便叙述，这里再次列出目标代码：</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">print</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;hello, world!&quot;</span></span></code></pre></div><p>Lua官方实现自带一个非常好用的工具，<code>luac</code>，即Lua Compiler，把源代码翻译为字节码并输出。是我们这个项目的最得力助手。看下其对<code>&quot;hello, world!&quot;</code>程序的输出：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> luac</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -l</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> hello_world.lua</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">main</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">hello_world.lua:0,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">0&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (5 </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">instructions</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> at</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0x600000d78080</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">0+</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> params,</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 2</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> slots,</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> upvalue,</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> locals,</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 2</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> constants,</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> functions</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">    1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	[1]	VARARGPREP	0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">    2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	[1]	GETTABUP 	0 0 0	; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">_ENV</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;print&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">    3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	[1]	LOADK    	1 1	; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">&quot;hello, world!&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">    4</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	[1]	CALL     	0 2 1	; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">1</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> in</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> out</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">    5</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	[1]	RETURN   	0 1 1	; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">0</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> out</span></span></code></pre></div><h2 id="动手实现" tabindex="-1">动手实现 <a class="header-anchor" href="#动手实现" aria-label="Permalink to &quot;动手实现&quot;">​</a></h2><h3 id="程序入口main-rs" tabindex="-1">程序入口<code>main.rs</code> <a class="header-anchor" href="#程序入口main-rs" aria-label="Permalink to &quot;程序入口\`main.rs\`&quot;">​</a></h3><p>简单起见，我们的解释器只有一种工作方式，即接受一个参数作为Lua源码文件，然后解析并执行。代码如下：</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">use</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> std</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">env;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">use</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> std</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">fs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">File</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">mod</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">mod</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> bytecode</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">mod</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> lex</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">mod</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> parse</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">mod</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> vm</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Vec</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> env</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">collect</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">len</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">        println!</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Usage: {} script&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, args[</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> file </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> File</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">args[</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">])</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">unwrap</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> proto </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> parse</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">load</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(file);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">    vm</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">ExeState</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">execute</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">proto);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>开头2行引用了两个标准库。<code>env</code>用于获取命令行参数。<code>fs::File</code>用来打开Lua源文件。</p><p>然后看<code>main()</code>函数。前面几行是读取参数并打开源文件。在打开源文件时使用了<code>unwrap()</code>，如果打开失败则终止程序。简单起见，接下来几章对所有错误的处理方式都是直接终止程序，之后再统一引入规范的错误处理。</p><p>最后2行是核心功能：</p><ul><li>首先语法分析模块<code>parse</code>（内部调用词法分析<code>lex</code>）解析文件，并返回解析结果proto；</li><li>然后创建一个虚拟机，并执行<code>proto</code>。</li></ul><p>这个流程跟Lua官方实现的API调用方式不一样。Lua官方实现的主要流程如下（完整示例）：</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">L</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> lua_open</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();   </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 创建lua_State</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">luaL_loadfile</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, filename);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 解析，并把解析结果放在栈顶</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">lua_pcall</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);       </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 执行栈顶</span></span></code></pre></div><p>这是因为Lua官方实现是“库”，API对外只暴露<code>lua_State</code>这一个数据结构，负责解析和执行两部分的功能，所以要先创建<code>lua_State</code>，再以其为基础去调用解析和执行，解析结果也是通过<code>Lua_state</code>的栈来传递。而我们目前没有类似的统一的状态数据结构，所以只能先分别调用解析和执行两部分的功能。</p><p>下面分别看解析和执行过程。</p><h3 id="词法分析lex-rs" tabindex="-1">词法分析<code>lex.rs</code> <a class="header-anchor" href="#词法分析lex-rs" aria-label="Permalink to &quot;词法分析\`lex.rs\`&quot;">​</a></h3><p>虽然上面的<code>main()</code>函数里是直接调用的语法分析<code>parse</code>模块，但语法分析内部是调用了词法分析<code>lex</code>模块。先看词法分析。</p><p>词法分析的输出是<code>Token</code>流。对于<code>&quot;hello, world!&quot;</code>程序，只需用到“标识print”和“字符串<code>&quot;hello, world!&quot;</code>”这两个Token，简单起见我们也暂时只支持这两个。另外我们还定义一个<code>Eos</code>用于表示文件结束：</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">#[derive(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Debug</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">pub</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> enum</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Token</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    Name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">    Eos</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>我们并没有一次性把输入文件解析完毕，返回一个<code>Token</code>数组，而是提供一个类似迭代器的功能，以便让语法分析模块按需调用。为此先定义一个词法分析器：</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">#[derive(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Debug</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">pub</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Lex</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    input</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> File</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>现在暂时只包含一个成员，即输入文件。</p><p>对外提供2个API：<code>new()</code>基于输入文件创建语法分析器；<code>next()</code>返回下一个Token。</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">impl</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Lex</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    pub</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(input</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> File</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> Self</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    pub</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> next</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&amp;mut</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Token</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>具体的解析过程就是单纯的字符串处理了，代码略过。</p><p>按照Rust的惯例，这里的<code>next()</code>函数的返回值应该是<code>Option&lt;Token&gt;</code>类型，<code>Some&lt;Token&gt;</code>表示读到新<code>Token</code>，<code>None</code>表示文件结束。但是既然<code>Token</code>本身就是一个<code>enum</code>了，直接在里面加入一个<code>Eos</code>似乎更方便些。而且如果改成<code>Option&lt;Token&gt;</code>类型，那么在下一次语法分析调用的地方，也会需要多一层判断，如下代码。所以还是选择了新增<code>Eos</code>类型。</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">loop</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    if</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> let</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Some</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(token) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> lex</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {  </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// extra check</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        match</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> token {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">            ...</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> // parse</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        break</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div>`,51);function u(s,B,m,E,b,v){const t=h,p=k("ClientOnly");return l(),d("div",null,[C,r(p,null,{default:o(()=>{var i,a;return[(((i=s.$frontmatter)==null?void 0:i.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(l(),F(t,{key:0,article:s.$frontmatter},null,8,["article"])):y("",!0)]}),_:1}),A])}const L=e(D,[["render",u]]);export{f as __pageData,L as default};
