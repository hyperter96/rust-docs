import{_ as l}from"./chunks/ArticleMetadata.B6LTgUMn.js";import{_ as c,m as d,a as u,u as _,B as p,e as t,x as n,o,p as m,q as h}from"./chunks/framework.coFu0xgG.js";import"./chunks/theme.CAIqAJ98.js";const q=JSON.parse('{"title":"前言","description":"","frontmatter":{"title":"前言","author":"皮特ᴾᵗ","date":"2024/02/02","categories":["Rust"]},"headers":[],"relativePath":"categories/rust/index.md","filePath":"categories/rust/index.md","lastUpdated":1713752178000}'),f={name:"categories/rust/index.md"},R=t("h1",{id:"前言",tabindex:"-1"},[n("前言 "),t("a",{class:"header-anchor",href:"#前言","aria-label":'Permalink to "前言"'},"​")],-1),x=t("p",null,"Rust 程序设计语言的本质实际在于 赋能（empowerment）：无论你现在编写的是何种代码，Rust 能让你在更为广泛的编程领域走得更远，写出自信。（这一点并不显而易见）",-1),k=t("p",null,"举例来说，那些“系统层面”的工作涉及内存管理、数据表示和并发等底层细节。从传统角度来看，这是一个神秘的编程领域，只为浸润多年的极少数人所触及，也只有他们能避开那些臭名昭著的陷阱。即使谨慎的实践者，亦唯恐代码出现漏洞、崩溃或损坏。",-1),$=t("p",null,"Rust 破除了这些障碍：它消除了旧的陷阱，并提供了伴你一路同行的友好、精良的工具。想要 “深入” 底层控制的程序员可以使用 Rust，无需时刻担心出现崩溃或安全漏洞，也无需因为工具链不靠谱而被迫去了解其中的细节。更妙的是，语言设计本身会自然而然地引导你编写出可靠的代码，并且运行速度和内存使用上都十分高效。",-1),g=t("p",null,"已经在从事编写底层代码的程序员可以使用 Rust 来提升抱负。例如，在 Rust 中引入并行是相对低风险的操作，因为编译器会替你找到经典的错误。同时你可以自信地采取更加激进的优化，而不会意外引入崩溃或漏洞。",-1),N=t("p",null,"但 Rust 并不局限于底层系统编程。它表达力强、写起来舒适，让人能够轻松地编写出命令行应用、网络服务器等各种类型的代码——在本书中就有这两者的简单示例。使用 Rust 能让你把在一个领域中学习的技能延伸到另一个领域：你可以通过编写网页应用来学习 Rust，接着将同样的技能应用到你的 Raspberry Pi（树莓派）上。",-1),b=t("p",null,"本书全面介绍了 Rust 为用户赋予的能力。其内容平易近人，致力于帮助你提升 Rust 的知识，并且提升你作为程序员整体的理解与自信。欢迎你加入 Rust 社区，让我们准备深入学习 Rust 吧！",-1),B=t("p",null,"—— Nicholas Matsakis 和 Aaron Turon",-1),C=t("h2",{id:"知识地图",tabindex:"-1"},[n("知识地图 "),t("a",{class:"header-anchor",href:"#知识地图","aria-label":'Permalink to "知识地图"'},"​")],-1);function P(e,y,V,v,w,A){const r=l,i=d("ClientOnly");return o(),u("div",null,[R,_(i,null,{default:p(()=>{var a,s;return[(((a=e.$frontmatter)==null?void 0:a.aside)??!0)&&(((s=e.$frontmatter)==null?void 0:s.showArticleMetadata)??!0)?(o(),m(r,{key:0,article:e.$frontmatter},null,8,["article"])):h("",!0)]}),_:1}),x,k,$,g,N,b,B,C])}const D=c(f,[["render",P]]);export{q as __pageData,D as default};
