import{_ as p}from"./chunks/ArticleMetadata.B-0HZGRR.js";import{_ as t,m as e,a as r,u as d,B as g,e as n,x as A,ai as y,o as h,p as D,q as o}from"./chunks/framework.coFu0xgG.js";import"./chunks/theme.DymPJBeh.js";const x=JSON.parse('{"title":"Macro宏编程","description":"","frontmatter":{"title":"Macro宏编程","author":"皮特ᴾᵗ","date":"2024/06/03 19:19","categories":["Rust语法进阶"],"tags":["Rust","Rust基础","宏编程"]},"headers":[],"relativePath":"categories/rust/02-Rust语法进阶/09-Macro宏编程.md","filePath":"categories/rust/02-Rust语法进阶/09-Macro宏编程.md","lastUpdated":1719842990000}'),c={name:"categories/rust/02-Rust语法进阶/09-Macro宏编程.md"},C=n("h1",{id:"macro宏编程",tabindex:"-1"},[A("Macro宏编程 "),n("a",{class:"header-anchor",href:"#macro宏编程","aria-label":'Permalink to "Macro宏编程"'},"​")],-1),F=y(`<p>在 Rust 中宏分为两大类：<strong>声明宏</strong>(<em>declarative macros</em>) <code>macro_rules!</code> 和三种<strong>过程宏</strong>(<em>procedural macros</em>):</p><ul><li><code>#[derive]</code>，在之前多次见到的派生宏，可以为目标结构体或枚举派生指定的代码，例如 <code>Debug</code> 特征</li><li>类属性宏(<em>Attribute-like macro</em>)，用于为目标添加自定义的属性</li><li>类函数宏(<em>Function-like macro</em>)，看上去就像是函数调用</li></ul><p>如果感觉难以理解，也不必担心，接下来我们将逐个看看它们的庐山真面目，在此之前，先来看下为何需要宏，特别是 Rust 的函数明明已经很强大了。</p><h2 id="宏和函数的区别" tabindex="-1">宏和函数的区别 <a class="header-anchor" href="#宏和函数的区别" aria-label="Permalink to &quot;宏和函数的区别&quot;">​</a></h2><h3 id="可变参数" tabindex="-1">可变参数 <a class="header-anchor" href="#可变参数" aria-label="Permalink to &quot;可变参数&quot;">​</a></h3><p>Rust 的函数签名是固定的：定义了两个参数，就必须传入两个参数，多一个少一个都不行，对于从 JS/TS 过来的同学，这一点其实是有些恼人的。</p><p>而宏就可以拥有可变数量的参数，例如可以调用一个参数的 <code>println!(&quot;hello&quot;)</code>，也可以调用两个参数的 <code>println!(&quot;hello {}&quot;, name)</code>。</p><h3 id="宏展开" tabindex="-1">宏展开 <a class="header-anchor" href="#宏展开" aria-label="Permalink to &quot;宏展开&quot;">​</a></h3><p>由于宏会被展开成其它代码，且这个展开过程是发生在<strong>编译器对代码进行解释之前</strong>。因此，宏可以为指定的类型实现某个特征：<strong>先将宏展开成实现特征的代码后，再被编译</strong>。</p><p>而函数就做不到这一点，因为它直到运行时才能被调用，而特征需要在<strong>编译期</strong>被实现。</p><h2 id="声明宏-macro-rules" tabindex="-1">声明宏 <code>macro_rules!</code> <a class="header-anchor" href="#声明宏-macro-rules" aria-label="Permalink to &quot;声明宏 \`macro_rules!\`&quot;">​</a></h2><p>使用 <code>macro_rules!</code> 创建一个简单的宏，用于将输入的字符串读入缓冲区：</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">use</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> std</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">io;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">macro_rules!</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> scanline</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> expr) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">        io</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">stdin</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">read_line</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&amp;mut</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> $</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">x)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">unwrap</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    let</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> mut</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> input </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;aaa</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> bbbb&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    scanline!</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(input);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    println!</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;I read: {:?}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, input);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>声明宏非常类似 <code>match</code> 表达式，也是一个模式匹配的过程。</p><h3 id="expr" tabindex="-1"><code>expr</code> <a class="header-anchor" href="#expr" aria-label="Permalink to &quot;\`expr\`&quot;">​</a></h3><p><code>($x:expr)</code> 中 $x 是一个标记树的变量，右侧的部分是一个规则，<code>expr</code> 是标记树类型之一，表示只能接受表达式。</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">macro_rules!</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> create_array</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">            let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">u8</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">; </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> [];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            arr </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        } </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> expr, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> expr) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">            let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> vec </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> vec!</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">a, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">b];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            vec</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> arr1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> create_array!</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    println!</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;{:?}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, arr1); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// []</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> arr2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> create_array!</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    println!</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;{:?}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, arr2); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// [2, 3]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>如果调用宏时不指定参数，那么返回长度为 <code>0</code> 的静态数组；指定 <code>2</code> 个参数时，返回长度为 <code>2</code> 的动态数组，当然这个例子本身没啥意义。如果是函数，那么参数要定义成 <code>(a: T, b: T)</code> 的形式，在代码块内部直接使用 <code>a</code>、<code>b</code> 即可，就像使用普通变量一样。但在宏里面，参数要定义成上述代码中的形式，然后在内部通过 <code>$a</code>、<code>$b</code> 的形式使用。</p><p>然后还需要注意的是，宏本质上就是对代码的替换，所以上面的代码在编译时会被替换为如下：</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> create_array!</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 会被替换为如下</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">u8</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">; </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> [];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        arr</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> create_array!</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 会被替换为如下</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> vec </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> vec!</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        vec</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>因此我们在定义宏的时候，<strong>代码块使用了两个大括号，这是必须的</strong>。如果只是返回一个普通的表达式，那么一个大括号就够了，但如果包含了 <code>let</code> 等语句，就必须再嵌套一个大括号。因为宏在被调用的地方会直接展开，直接替换为大括号里面的内容，那么结果可能会导致当前作用域的变量被污染。但如果大括号里面还有大括号，那么展开的时候，代码块就会被限定在一个单独的作用域中，不会污染外部变量。</p><div class="warning custom-block"><p class="custom-block-title">注意</p><ul><li>外层的大括号换成小括号也是可以的，每个分支之间必须用分号分隔。</li><li>替换后 <code>$a</code>、<code>$b</code> 就都不存在了，它们不是变量，仅仅是个占位符</li></ul></div><p>宏的参数和函数的参数有着本质的不同，函数的参数是货真价实的变量，而宏的参数只是一个占位符，在调用时会被替换为具体的表达式。</p><h3 id="ident" tabindex="-1"><code>ident</code> <a class="header-anchor" href="#ident" aria-label="Permalink to &quot;\`ident\`&quot;">​</a></h3><p><code>$v</code> 后面如果跟 <code>expr</code>，表示 <code>$v</code> 要接收一个表达式，但除了 <code>expr</code> 之外还可以是别的。</p><ul><li><code>ident</code>：标识符，比如结构体名称、函数名称、变量名、类型名等等</li><li><code>ty</code>：类型名，虽然 ident 也可以表示类型名，但它的匹配范围仅限制于 <code>i32</code>、<code>String</code> 这种单个标识符，不能匹配像 <code>Vec&lt;i32&gt;</code>、以及带生命周期这种更复杂的类型</li><li><code>expr</code>：表达式</li></ul><p>举个例子：</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">macro_rules!</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> some_macro1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">var</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">ident) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">        println!</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;{:?}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">var)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">macro_rules!</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> some_macro2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">var</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">ident) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">        // 此时的 $var 必须是含有 name 和 age 两个字段的结构体名称</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        $</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">var{name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;satori&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 17</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 666</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 展开后等价 println!(&quot;{:?}&quot;, x)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    some_macro1!</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(x);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 666</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    #[derive(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Debug</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Girl</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&#39;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">static</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> str</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> u8</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    println!</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;{:?}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">some_macro2!</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Girl</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">));  </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// Girl { name: &quot;satori&quot;, age: 17 }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>不难理解，如果 <code>$var</code> 后面还是 <code>expr</code>，那么这两个调用就是不合法的，因为 <code>expr</code> 要求的是编译期间可以计算的表达式。如果想传递变量（函数、结构体名称啥的都是变量），那么需要将 <code>expr</code> 换成 <code>ident</code>。</p><p>因此我们便看到了宏的强大之处，比如 <code>some_macro2</code> 里面的 <code>$var</code>，我们并不知道它是啥，但依旧可以对它做任意的操作。而我们对 <code>$var</code> 进行了结构体实例化操作，并指定了 <code>name</code> 和 <code>age</code> 两个字段，所以我们在调用时只需要传递合法的结构体即可。</p><h3 id="或者" tabindex="-1"><code>$(...)*</code> 或者 <code>$(...),*</code> <a class="header-anchor" href="#或者" aria-label="Permalink to &quot;\`$(...)*\` 或者 \`$(...),*\`&quot;">​</a></h3><p>Rust 的宏允许通过 <code>$(...)*</code> 或者 <code>$(...),*</code> 这样的模式来指定宏可以接收任意数量的参数，比如 <code>$($el:expr),*</code> 表示可以接收任意个表达式，表达式的名称叫做 <code>el</code>。另外通配符除了 * 之外还有 <code>+</code> 和 <code>?</code>，分别表示任意次、至少一次、零次或一次。</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">macro_rules!</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> print_values</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">expr),</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">        // 此时 value 不再是一个表达式，而是一系列表达式</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">        // 所以需要将代码放在 $()* 里面，表示对每个表达式单独处理</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        $</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">            println!</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;{:?}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">value);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        )</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    print_values!</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">u8</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;你好&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">vec!</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    /*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    2</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    &quot;你好&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    [1, 2, 3]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">     */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h2 id="过程宏" tabindex="-1">过程宏 <a class="header-anchor" href="#过程宏" aria-label="Permalink to &quot;过程宏&quot;">​</a></h2><h3 id="派生宏-derive" tabindex="-1">派生宏<code>#[derive(...)]</code> <a class="header-anchor" href="#派生宏-derive" aria-label="Permalink to &quot;派生宏\`#[derive(...)]\`&quot;">​</a></h3><p>在Rust中，派生宏是一种特殊的宏，它允许开发者为自定义的数据类型自动实现trait。派生宏使用<code>proc_macro_derive</code>属性来定义，其基本形式如下：</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">use</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> quote</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">quote;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">use</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> proc_macro</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">TokenStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">#[proc_macro_derive(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">YourTrait</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">pub</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> your_derive_macro</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(input</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> TokenStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> TokenStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 派生宏的处理逻辑</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>在上述例子中，我们使用<code>proc_macro_derive</code>属性定义了一个名为<code>YourTrait</code>的派生宏。派生宏接受一个<code>TokenStream</code>参数<code>input</code>，表示派生宏调用的输入。在派生宏的处理逻辑中，我们可以根据<code>input</code>对类型上的<code>trait</code>进行自动实现，并返回一个<code>TokenStream</code>作为输出。</p><p>派生宏在Rust中具有以下几个特点：</p><ul><li>自动实现<code>trait</code>：派生宏允许开发者为自定义的数据类型自动实现trait，无需手动编写trait的实现代码。这样可以大大减少重复的代码，提高代码的可读性和可维护性。</li><li>编译期间执行：派生宏的逻辑在编译期间执行，而不是运行时执行。这意味着<code>trait</code>的实现代码在编译时就已经确定，不会增加运行时的性能开销。</li><li>代码安全性：派生宏生成的<code>trait</code>实现代码必须是合法的Rust代码，它们受到Rust编译器的类型检查和安全检查。这保证了派生宏生成的<code>trait</code>实现不会引入潜在的编译错误和安全漏洞。</li></ul><h4 id="构造派生宏和使用" tabindex="-1">构造派生宏和使用 <a class="header-anchor" href="#构造派生宏和使用" aria-label="Permalink to &quot;构造派生宏和使用&quot;">​</a></h4><p>我们以<code>hello_world</code>为例子，</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> cargo</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> new</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> hello-world</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> cd</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> hello-world</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> cargo</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> new</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> hello-world-macro</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> --lib</span></span></code></pre></div><p>在<code>hello-world-macro</code>的<code>cargo.toml</code>添加</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki shiki-themes github-light github-dark-dimmed has-diff vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]</span></span>
<span class="line diff add"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">quote = </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;1.0.33&quot;</span></span>
<span class="line diff add"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">syn = </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;2.0.39&quot;</span></span>
<span class="line"></span>
<span class="line diff add"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">lib</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">] </span></span>
<span class="line diff add"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">proc-macro = </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">true</span></span></code></pre></div><p>然后在<code>hello-world-macro</code>的<code>src/lib.rs</code>编写<code>Hello</code>的派生宏，</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">use</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> quote</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">quote;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">use</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> proc_macro</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">TokenStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">#[proc_macro_derive(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Hello</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">pub</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> hello</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(_item</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> TokenStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> TokenStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> add_hello_world </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> quote!</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        impl</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Example</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">            fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> hello_world</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&amp;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) { </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 为结构体Example实现hello_world的方法</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">                println!</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;hello, world&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    add_hello_world</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">into</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>那么，我们在<code>hello-world</code>的<code>src/main.rs</code>里引入<code>Hello</code>这个派生宏，要先在<code>cargo.toml</code>导入<code>hello-world-macro</code>的路径，</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki shiki-themes github-light github-dark-dimmed has-diff vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]</span></span>
<span class="line diff add"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">hello-world-macro = { path = </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;./hello-world-macro&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">} </span></span></code></pre></div><p>在<code>src/main.rs</code>使用<code>Hello</code>的派生宏，</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">#[macro_use]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">extern</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> crate</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> hello_world_macro;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">#[derive(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Hello</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Example</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> e </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Example</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">hello_world</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// hello, world</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h4 id="带参数的派生宏" tabindex="-1">带参数的派生宏 <a class="header-anchor" href="#带参数的派生宏" aria-label="Permalink to &quot;带参数的派生宏&quot;">​</a></h4><p>派生宏可以带有参数，让我们创建一个带有参数的派生宏（还是以<code>hello-world</code>为例子），用于根据参数生成不同类型的<code>trait</code>实现。</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">use</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> proc_macro</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">TokenStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">#[proc_macro_derive(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Hello</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, attributes(attr1, attr2))]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">pub</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> your_trait_derive_macro</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(input</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> TokenStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> TokenStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> output </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> input</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">to_string</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 解析属性参数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> attr1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> output</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">contains</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;attr1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">        &quot;impl Hello for Example {\\n    // 根据attr1生成的trait实现\\n}&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">        &quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    };</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> attr2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> output</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">contains</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;attr2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">        &quot;impl Hello for Example {\\n    // 根据attr2生成的trait实现\\n}&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">        &quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    };</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> format!</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">        &quot;#[derive(Hello)]</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">{}</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">{}</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">{}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        output, attr1, attr2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">unwrap</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h4 id="自动实现序列化trait" tabindex="-1">自动实现序列化<code>trait</code> <a class="header-anchor" href="#自动实现序列化trait" aria-label="Permalink to &quot;自动实现序列化\`trait\`&quot;">​</a></h4><p>派生宏可以用于自动实现序列化<code>trait</code>，让我们通过一个例子来演示如何使用派生宏实现<code>Serialize</code> trait。</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">use</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> proc_macro</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">TokenStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">#[proc_macro_derive(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Serialize</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">pub</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> serialize_derive_macro</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(input</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> TokenStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> TokenStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> output </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> input</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">to_string</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> format!</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">        &quot;#[derive(Serialize)]</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">{}</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">impl Serialize for YourType {{\\n    // 自动实现Serialize trait的代码\\n}}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        output</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">unwrap</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>在上述例子中，我们定义了一个名为<code>serialize_derive_macro</code>的派生宏，并使其自动实现<code>Serialize</code> trait。在宏的处理逻辑中，我们直接将输入的类型名和字段列表作为输出，并生成一个自动实现<code>Serialize</code> trait的代码块。这样一来，我们就可以通过派生宏轻松地为自定义的数据类型自动添加序列化的功能，而无需手动实现<code>Serialize</code> trait。</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">use</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> serde</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Serialize</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Deserialize</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">#[derive(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Serialize</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> u32</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> person </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;Alice&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">to_string</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 30</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> serialized </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> serde_json</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">to_string</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">person)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">unwrap</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    println!</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Serialized: {}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, serialized);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> deserialized</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Person</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> serde_json</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">from_str</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">serialized)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">unwrap</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    println!</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Deserialized: {:?}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, deserialized);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>我们定义了一个名为<code>Person</code>的结构体，并使用派生宏<code>#[derive(Serialize)]</code>为它自动实现了<code>Serialize</code> trait。通过这个简单的派生宏，我们就能够将<code>Person</code>结构体序列化为<code>JSON</code>字符串，并成功地将<code>JSON</code>字符串反序列化回<code>Person</code>结构体。</p><h4 id="自动实现比较trait" tabindex="-1">自动实现比较<code>trait</code> <a class="header-anchor" href="#自动实现比较trait" aria-label="Permalink to &quot;自动实现比较\`trait\`&quot;">​</a></h4><p>派生宏还可以用于自动实现比较<code>trait</code>，让我们通过一个例子来演示如何使用派生宏实现<code>PartialEq</code>和<code>PartialOrd</code> trait。</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">use</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> proc_macro</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">TokenStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">#[proc_macro_derive(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Comparable</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">pub</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> comparable_derive_macro</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(input</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> TokenStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> TokenStream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> output </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> input</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">to_string</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> format!</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">        &quot;#[derive(PartialEq, PartialOrd)]</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">{}</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">impl Comparable for YourType {{\\n    // 自动实现比较trait的代码\\n}}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        output</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">unwrap</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>我们定义了一个名为<code>comparable_derive_macro</code>的派生宏，并使其自动实现<code>PartialEq</code>和<code>PartialOrd</code> trait。在宏的处理逻辑中，我们直接将输入的类型名和字段列表作为输出，并生成一个自动实现比较<code>trait</code>的代码块。</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">#[derive(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Comparable</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Point</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> i32</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> i32</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> p1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Point</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> { x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> };</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> p2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Point</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> { x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 4</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> };</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> p3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Point</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> { x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 使用派生的比较trait进行比较</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    assert_eq!</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(p1, p3);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    assert_ne!</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(p1, p2);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    assert!</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(p1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> p2);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>我们定义了一个名为<code>Point</code>的结构体，并使用派生宏<code>#[derive(Comparable)]</code>为它自动实现了<code>PartialEq</code>和<code>PartialOrd</code> trait。通过这个简单的派生宏，我们就能够轻松地为自定义的数据类型添加比较的功能，并使用派生的比较<code>trait</code>进行比较操作。</p>`,66);function B(s,u,E,m,v,b){const l=p,k=e("ClientOnly");return h(),r("div",null,[C,d(k,null,{default:g(()=>{var i,a;return[(((i=s.$frontmatter)==null?void 0:i.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(h(),D(l,{key:0,article:s.$frontmatter},null,8,["article"])):o("",!0)]}),_:1}),F])}const $=t(c,[["render",B]]);export{x as __pageData,$ as default};
